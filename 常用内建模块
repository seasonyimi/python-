#常用内建模块


# datetime
from datetime import datetime,timedelta
# 获取当前时间
now = datetime.now()
print(now)
print(type(now))
# 获取指定日期和时间
dt = datetime(2015,4,19,20,13,25)
print(dt)
# datetime转timestamp
t = dt.timestamp()
print(t)
# timestamp转datatime
print('本地时间:',datetime.fromtimestamp(t))
#UTC标准时间
print('UTC标准时间:',datetime.utcfromtimestamp(t))
# str 转 datatime
cday = datetime.strptime('2020-12-17 20:15:13','%Y-%m-%d %H:%M:%S')
print('根据datetime.strptime将str转datetime:',cday)
#datetime转str
print('datetime转str:',now.strftime('%a,%b,%d,%H:%M'))
# 对datetime加减
print('加10小时：',now + timedelta(hours=10))
print('减一天：', now - timedelta(days=1))
print('加两天十二个小时：',now + timedelta(days=2,hours=12))

#collections 集合模块
from collections import namedtuple
Point = namedtuple('Point',['x','y'])   #namedtuple用来创建一个自定义的tuple
p = Point(1,2)
print(p.x)
print(p.y)
print(isinstance(p,Point))
print(isinstance(p,tuple))
#deque 高效实现插入和删除操作的双向操作
from collections import deque
q = deque(['a','b','c'])
q.append('x')  #加载在尾部
q.appendleft('y')   #头部加元素
print(q)
q.pop()        #删除尾部的
q.popleft()    #删除头部的
print(q)
# defaultdict 用dict时，没有key,用defaultdict可以返回一个默认值
from collections import defaultdict
dd = defaultdict(lambda :'N/A')
dd['key1'] ='abc'
print('key1=',dd['key1'])
print('key2=',dd['key2'])
# ChainMap  将一组dict串起来并组成一个逻辑上的dict
from collections import ChainMap
import os,argparse
#构造缺省参数
defaults = {
    'color':'red',
    'user':'guest'
}
# 创建解析器
parser = argparse.ArgumentParser()  # argparse是一个Python模块：命令行选项、参数和子命令解析器
parser.add_argument('-u','-user')   #添加参数
parser.add_argument('-c','-color')
namespace = parser.parse_args()    #解析参数
command_line_args = { k: v for k,v in vars(namespace).items() if v}
# 组合成ChainMap
combined = ChainMap(command_line_args,defaults)
# 打印参数
print('color=%s' % combined['color'])
print('user=%s' % combined['user'])
#counter  计数器
from collections import Counter
c = Counter()
for ch in 'programing':
    c[ch] = c[ch] + 1
print(c)

# base64 用64个字符来表示任意二进制数据的方法
import base64
print(base64.b64encode(b'binary\x00string'))
print(base64.b64decode(b'YmluYXJ5AHN0cmluZw=='))
# 练习
def safe_base64_decode(s):
    # 添加等于号
    if len(s)%4!=0:
        s = s+bytes('=',encoding='utf-8')*(4-len(s)%4)
        print('s=',s)
    # 解决字符串和bytes类型
    if not isinstance(s,bytes):
        s = bytes(s,encoding='utf-8')
        print('s==',s)
    #解码
    return base64.b64decode(s)
# 测试:
assert b'abcd' == safe_base64_decode(b'YWJjZA=='), safe_base64_decode('YWJjZA==')
assert b'abcd' == safe_base64_decode(b'YWJjZA'), safe_base64_decode('YWJjZA')
print('ok')

#struct  解决bytes和其他二进制数据类型的转换
import struct
print(struct.pack('>I',10240099))   #  >表示字节顺序是big-endian(网络序)，I表示4字节无符号整数和H：2字节无符号整数
#hashlib 摘要算法(哈希算法，散列算法)
#通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest,目的是为了发现原始数据是否被人篡改
#摘要函数时一个单向函数
import hashlib
md5 = hashlib.md5()
md5.update('how to use md5 in python hashlib?'.encode('utf-8'))
md5.update('python hashlib?'.encode('utf-8'))
md5.update('python hashlib'.encode('utf-8'))
print(md5.hexdigest())
# 练习
# 根据用户输入的口令,计算出存储在数据库中的MD5口令
# 经过Salt处理MD5口令
#根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5
import random
# db = {
#     'michael': 'e10adc3949ba59abbe56e057f20f883e',
#     'bob': '878ef96e86145580c38c87f0410ad153',
#     'alice': '99b1c2188db85afee403b1536010c2c9'
# }
def get_md5(s):
    md5 = hashlib.md5()
    md5.update(s.encode('utf-8'))
    get_md5 = md5.hexdigest()
    return get_md5
class User(object):
    def __init__(self,username,password):
        self.username = username
        self.salt = ''.join([chr(random.randint(48,122)) for i in range(20)])
        self.password = get_md5(password + self.salt)
db = {
    'michael': User('michael', '123456'),
    'bob': User('bob', 'abc999'),
    'alice': User('alice', 'alice2008')
}
def login(username,password):
    user = db[username]
    print(user)
    print(user.password)
    if user.password == get_md5(password+user.salt):
        return True
    else:
        return False
# 测试:
assert login('michael', '123456')
assert login('bob', 'abc999')
assert login('alice', 'alice2008')
assert not login('michael', '1234567')
assert not login('bob', '123456')
assert not login('alice', 'Alice2008')
print('ok')
