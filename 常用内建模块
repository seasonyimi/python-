#常用内建模块


# datetime
from datetime import datetime,timedelta
# 获取当前时间
now = datetime.now()
print(now)
print(type(now))
# 获取指定日期和时间
dt = datetime(2015,4,19,20,13,25)
print(dt)
# datetime转timestamp
t = dt.timestamp()
print(t)
# timestamp转datatime
print('本地时间:',datetime.fromtimestamp(t))
#UTC标准时间
print('UTC标准时间:',datetime.utcfromtimestamp(t))
# str 转 datatime
cday = datetime.strptime('2020-12-17 20:15:13','%Y-%m-%d %H:%M:%S')
print('根据datetime.strptime将str转datetime:',cday)
#datetime转str
print('datetime转str:',now.strftime('%a,%b,%d,%H:%M'))
# 对datetime加减
print('加10小时：',now + timedelta(hours=10))
print('减一天：', now - timedelta(days=1))
print('加两天十二个小时：',now + timedelta(days=2,hours=12))

#collections 集合模块
from collections import namedtuple
Point = namedtuple('Point',['x','y'])   #namedtuple用来创建一个自定义的tuple
p = Point(1,2)
print(p.x)
print(p.y)
print(isinstance(p,Point))
print(isinstance(p,tuple))
#deque 高效实现插入和删除操作的双向操作
from collections import deque
q = deque(['a','b','c'])
q.append('x')  #加载在尾部
q.appendleft('y')   #头部加元素
print(q)
q.pop()        #删除尾部的
q.popleft()    #删除头部的
print(q)
# defaultdict 用dict时，没有key,用defaultdict可以返回一个默认值
from collections import defaultdict
dd = defaultdict(lambda :'N/A')
dd['key1'] ='abc'
print('key1=',dd['key1'])
print('key2=',dd['key2'])
# ChainMap  将一组dict串起来并组成一个逻辑上的dict
from collections import ChainMap
import os,argparse
#构造缺省参数
defaults = {
    'color':'red',
    'user':'guest'
}
# 创建解析器
parser = argparse.ArgumentParser()  # argparse是一个Python模块：命令行选项、参数和子命令解析器
parser.add_argument('-u','-user')   #添加参数
parser.add_argument('-c','-color')
namespace = parser.parse_args()    #解析参数
command_line_args = { k: v for k,v in vars(namespace).items() if v}
# 组合成ChainMap
combined = ChainMap(command_line_args,defaults)
# 打印参数
print('color=%s' % combined['color'])
print('user=%s' % combined['user'])
#counter  计数器
from collections import Counter
c = Counter()
for ch in 'programing':
    c[ch] = c[ch] + 1
print(c)

# base64 用64个字符来表示任意二进制数据的方法
import base64
print(base64.b64encode(b'binary\x00string'))
print(base64.b64decode(b'YmluYXJ5AHN0cmluZw=='))
# 练习
def safe_base64_decode(s):
    # 添加等于号
    if len(s)%4!=0:
        s = s+bytes('=',encoding='utf-8')*(4-len(s)%4)
        print('s=',s)
    # 解决字符串和bytes类型
    if not isinstance(s,bytes):
        s = bytes(s,encoding='utf-8')
        print('s==',s)
    #解码
    return base64.b64decode(s)
# 测试:
assert b'abcd' == safe_base64_decode(b'YWJjZA=='), safe_base64_decode('YWJjZA==')
assert b'abcd' == safe_base64_decode(b'YWJjZA'), safe_base64_decode('YWJjZA')
print('ok')

#struct  解决bytes和其他二进制数据类型的转换
import struct
print(struct.pack('>I',10240099))   #  >表示字节顺序是big-endian(网络序)，I表示4字节无符号整数和H：2字节无符号整数
#hashlib 摘要算法(哈希算法，散列算法)
#通过摘要函数f()对任意长度的数据data计算出固定长度的摘要digest,目的是为了发现原始数据是否被人篡改
#摘要函数时一个单向函数
import hashlib
md5 = hashlib.md5()
md5.update('how to use md5 in python hashlib?'.encode('utf-8'))
md5.update('python hashlib?'.encode('utf-8'))
md5.update('python hashlib'.encode('utf-8'))
print(md5.hexdigest())
# 练习
# 根据用户输入的口令,计算出存储在数据库中的MD5口令
# 经过Salt处理MD5口令
#根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5
import random
# db = {
#     'michael': 'e10adc3949ba59abbe56e057f20f883e',
#     'bob': '878ef96e86145580c38c87f0410ad153',
#     'alice': '99b1c2188db85afee403b1536010c2c9'
# }
def get_md5(s):
    md5 = hashlib.md5()
    md5.update(s.encode('utf-8'))
    get_md5 = md5.hexdigest()
    return get_md5
class User(object):
    def __init__(self,username,password):
        self.username = username
        self.salt = ''.join([chr(random.randint(48,122)) for i in range(20)])
        self.password = get_md5(password + self.salt)
db = {
    'michael': User('michael', '123456'),
    'bob': User('bob', 'abc999'),
    'alice': User('alice', 'alice2008')
}
def login(username,password):
    user = db[username]
    print(user)
    print(user.password)
    if user.password == get_md5(password+user.salt):
        return True
    else:
        return False
# 测试:
assert login('michael', '123456')
assert login('bob', 'abc999')
assert login('alice', 'alice2008')
assert not login('michael', '1234567')
assert not login('bob', '123456')
assert not login('alice', 'Alice2008')
print('ok')


#hmac 通过对比数据的哈希值验证一段数据是否有效
import hmac
message = b'Hello,world!'
key = b'secret'
h = hmac.new(key,message,digestmod='MD5')
#如果消息很长，可以多次调用h.update(msg)
m = h.hexdigest()
print(m)
# 练习
# 将MD5+salt改成标准的hmac算法，验证用户口令
import hmac,random
def hmac_md5(key,s):
    ks = hmac.new(key.encode('utf-8'),s.encode('utf-8'),digestmod='MD5')
    key_s = ks.hexdigest()
    return key_s
class User(object):
    def __init__(self,username,password):
        self.username = username
        self.key = ''.join([chr(random.randint(48,122)) for  i in range(20)])
        self.password = hmac_md5(self.key,password)
db = {
    'michael': User('michael', '123456'),
    'bob': User('bob', 'abc999'),
    'alice': User('alice', 'alice2008')
}
def login(username,password):
    user = db[username]
    return user.password == hmac_md5(user.key,password)
# 测试:
assert login('michael', '123456')
assert login('bob', 'abc999')
assert login('alice', 'alice2008')
assert not login('michael', '1234567')
assert not login('bob', '123456')
assert not login('alice', 'Alice2008')
print('ok')

# itertools  操作迭代对象的函数
import itertools
# natuals = itertools.count(1)  #count创建一个无限的迭代器，从1开始停不下来
# for n in natuals:
    # print(n)
cs = itertools.cycle('ABC')  #cycle让序列无限重复
# for c in cs:
    # print(c)
ns = itertools.repeat('a',2)   #repeat让元素无限循环下去，第二个参数限制重复次数
for n in ns:
    print(n)
# takewhile截取itertools有限序列
natuals = itertools.count(2)
ns = itertools.takewhile(lambda x:x <=10,natuals)
print(list(ns))
# chain() 将一组迭代对象串联起来，形成一个更大的迭代器
for c in itertools.chain('ABC','DEF') :
    print('依次输出两个迭代器的结果：',c)
# groupby() 将迭代器中相邻的重复元素挑出来放一起
for key,group in itertools.groupby('AAABBbCCEEDDFFGG'):
    print('依次输出元素，groupby作用：',key,list(group))
# 练习
# 利用python提供的itertools模板，计算这个序列的前N项和
import itertools
def pi(N):
    ' 计算pi的值 '
    # # step 1: 创建一个奇数序列: 1, 3, 5, 7, 9, ...
    # # step 2: 取该序列的前N项: 1, 3, 5, 7, 9, ..., 2*N-1.
    # step 3: 添加正负符号并用4除: 4/1, -4/3, 4/5, -4/7, 4/9, ...
    # step 4: 求和:
    s = 0
    a = 1
    for i in itertools.count(1):
        if i > 2*N:
            return s
        elif i%2 == 1:
            s += (4/i)*a
            a = -a
# 测试:
print(pi(10))
print(pi(100))
print(pi(1000))
print(pi(10000))
assert 3.04 < pi(10) < 3.05
assert 3.13 < pi(100) < 3.14
assert 3.140 < pi(1000) < 3.141
assert 3.1414 < pi(10000) < 3.1415
print('ok')

# contextlib
# try...finally
try:
    f = open(r'D:\Download\1.txt','r')
    print(f.read())
finally:
    if f:
        f.close()
# try...finally 可以用 with 代替
with open(r'D:\Download\1.txt','r') as f:
    print(f.read())
# 实现上下文管理就可以用with
# 上下文管理是通过 __enter__和___exit__两个方法实现
class Query(object):
    def __init__(self,name):
        self.name = name
    def __enter__(self):
        print('Begin')
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            print('Error')
        else:
            print('End')
    def query(self):
        print('Query info about %s...' % self.name)
with Query('Bob') as q:
    q.query()
# contextmanager
# contextlib可以简化__enter__和__exit__
from contextlib import contextmanager
class Query1(object):
    def __init__(self,name):
        self.name = name
    def query(self):
        print('Query1 info about %s...'% self.name)
@contextmanager
def create_query(name):
    print('Begin')
    q = Query1(name)
    yield q
    print('END')
with create_query('Mark') as q:
    q.query()
# 在某段代码执行前后自动执行特定代码
@contextmanager
def tag(name):
    print("<%s>"% name)
    yield
    print("<%s>"% name)
'''
1.with语句首先执行yield之前的语句，因此打印出<h1>；
2.yield调用会执行with语句内部的所有语句，因此打印出hello和world；
3.最后执行yield之后的语句，打印出</h1>
'''
with tag("h1"):
    print("hello")
    print("world")

# closing  对象变成上下文对象
from contextlib import closing
from urllib.request import urlopen
@contextmanager
#closing 经过contextmanager装饰的generator
def closing(thing):
    try:
        yield thing
    finally:
        thing.close()
with closing(urlopen('https://www.baidu.com')) as page:
    for line in page:
        print(line)


# urllib   提供一系列用于操作URL的功能
#get
from urllib import request
with request.urlopen('https://www.baidu.com') as f:
    data = f.read()
    print("------------------------")
    print('Status:',f.status,f.reason)
    for k,v in f.getheaders():
        print('%s:%s' % (k,v))
    print("+++++++++++++++++++")
    print('Data:',data.decode('utf-8'))
# 模拟浏览器发送GET请求
from urllib import request
req = request.Request('https://www.baidu.com')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
with request.urlopen(req) as f:
    print("移动------------------")
    print('Status:',f.status,f.reason)
    for k,v in f.getheaders():
        print('%s:%s' %(k,v))
    print("结束========================")
    # print('Data:',f.read().decode('utf-8'))
#post
from urllib import request,parse
print('Login to weibo.cn...')
user = input('username:')
passwd = input('password:')
login_data = parse.urlencode([
    ('username',user),
    ('password',passwd),
    ('entry','mweibo'),
    ('client_id',''),
    ('savestate','1'),
    ('ec',''),
    ('pagerefer','https://passport.weibo.cn/signin/welcome?entry=mweibo&r=http%3A%2F%2Fm.weibo.cn%2F')
])

req = request.Request('https://passport.weibo.cn/sso/login')
req.add_header('Origin','https://passport.weibo.cn')
req.add_header('User-Agent', 'Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25')
req.add_header('Referer','https://passport.weibo.cn/signin/login?entry=mweibo&res=wel&wm=3349&r=http%3A%2F%2Fm.weibo.cn%2F')

with request.urlopen(req,data=login_data.encode('utf-8')) as f:
    print('Status:',f.status,f.reason)
    for k,v in f.getheaders():
        print('%s : %s' %(k,v))
    print('Data:',f.read().decode('utf-8'))
# Hander
import urllib
proxy_hander = urllib.request.ProxyHandler({'http':''})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm','host','username','password')
opener = urllib.request.build_opener(proxy_hander,proxy_auth_handler)
with opener.open('') as f:
    pass
# Pillow
from PIL import Image,ImageFilter,ImageDraw,ImageFont
import random
# 打开一张图片
im = Image.open(r'C:\Users\seaso\Downloads\20201016144027192_0001.jpg')
# 获取图像尺寸
w,h = im.size
print('Original image size: %sx%s' %(w,h))
# 缩小50%
im.thumbnail((w//2,h//2))
print('Resize image to: %sx%s' %(w//2,h//2))
# 保存为jpg
im.save('thumbnail.jpg','jpeg')
#应用模糊滤镜
im2 = im.filter(ImageFilter.BLUR)
im2.save('bule.jpg','jpeg')
#随机字母
def rndChar():
    return chr(random.randint(65,90))
#随机颜色1
def rndColor1():
    return (random.randint(64,255),random.randint(64,255),random.randint(64,255))
# 随机颜色2
def rndColor2():
    return (random.randint(32,127),random.randint(32,127),random.randint(32,127),random.randint(32,127))
#图片240*60
width = 60*4
height = 60
image = Image.new('RGB',(width,height),(255,255,255))
# 创建Font对象
font = ImageFont.truetype(r'D:\software\xunlei\Thunder\Program\resources\app\plugins\VipPayCenter\1.1.1\_nuxt\fonts\65e885f.ttf',36)
#创建Draw对象
draw = ImageDraw.Draw(image)
#填充每个像素
for x in range(width):
    for y in range(height):
        draw.point((x,y),fill=rndColor1())
#输出文字
for t in range(4):
    draw.text((60*t + 10,10),rndChar(),font=font,fill=rndColor2())
# 模糊
image = image.filter(ImageFilter.BLUR)
image.save('code.jpg','jpeg')

#request
import requests
r = requests.get('https://www.douban.com/')  #豆瓣首页
print(r.status_code)
print(r.text)
# psutil 获取系统信息
import psutil
print('CPU逻辑数量：',psutil.cpu_count())
print('CPU物理核心：',psutil.cpu_count(logical=False))
print('统计CPU的用户/系统/空闲时间：',psutil.cpu_times())
# 模拟top命令刷新CPU使用率
for x in range(2):
    print('刷新CPU使用率:\n',psutil.cpu_percent(interval=1,percpu=True))
print('获取物理内存：\n',psutil.virtual_memory())
print('获取交换内存：\n',psutil.swap_memory())
print('获取磁盘分区信息:\n',psutil.disk_partitions())
print('获取网络读写字节/包的个数：\n',psutil.net_io_counters())
print('获取网络接口信息：\n',psutil.net_if_addrs())
print('获取当前网络连接信息：\n',psutil.net_connections())
print('获取所有进程ID：\n',psutil.pids())
p = psutil.Process(900)
print('获取进程号为900的进程名:',p.name())
print('获取进程号为900的进程exe路径：',p.exe())
# print('获取进程号为900的进程工作目录：',p.cwd())
# print('获取进程号为900的进程启动命令行：',p.cmdline())
# print('获取进程号为900的父进程ID：',p.ppid())
print('获取进程号为900的状态：',p.status())
# print('获取进程号为900的进程用户名：',p.username())
print('获取进程号为900的进程创建时间：',p.create_time())
# print('获取进程号为900的进程终端',p.terminate())
print('获取进程号为900的CPU使用时间',p.cpu_times())
print('获取进程号为900的使用内存：',p.memory_info())
# print('获取进程号为900的打开文件：',p.open_files())
print('获取进程号为900的相关网络连接：',p.connections())
print('获取进程号为900的线程数量',p.num_threads())
print('获取进程号为900的所有线程信息：',p.threads())
# print('获取进程号为900的进程环境变量：',p.environ())
print('模拟出ps命令的效果：',psutil.test())
