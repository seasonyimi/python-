#调用栈
#如果错误没有被捕获，就会一直往上抛，最后被python解释器捕获，答应一个错误信息
def foo(s):
    return 10 / int(s)
def bar(s):
    return foo(s)*2
def main():
    bar('0')

print(main())


#记录错误
import logging  #logging记录错误模板

def foo(s):
    return 10 / int(s)
def bar(s):
    return foo(s)*2
def main():
    try:
        bar('0')
    except Exception as e:  #捕获错误
        logging.exception(e)
main()
print('END')

#try...except捕获错误

def foo(s):
    return 10 / int(s)
def bar(s):
    return foo(s)*2
def main():
    try:
        bar('0')
    except Exception as e:  #捕获错误
        print('Error:',e)
    finally:
        print('finally...')
main()
print('END')


#不同错误捕获
#常见错误类型和继承关系：https://docs.python.org/3/library/exceptions.html#exception-hierarchy
def foo(s):
    return 10 / int(s)
def bar(s):
    return foo(s)*2
def main():
    try:
        print('try...')
        bar('1.1')
    except ValueError as e:  #捕获值类型错误
        print('ValueError:',e)
    except ZeroDivisionError as e:  #捕获值不能为0错误
        print('ZeroDivisionError:',e)
    else:
        print('no error')
    finally:
        print('finally...')
main()
print('END')


#抛出错误
class FooError(ValueError):
    pass

def foo(s):
    n = int(s)
    if n == 0:
        raise FooError('invalid value %s' %s)
    return 10/n
def bar():
    try:
        foo('0')
    except ValueError as e:
        print('ValueError!')
        raise
bar()
