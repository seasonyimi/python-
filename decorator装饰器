# 装饰器
# 类似Java的注释，面向切面编程
# log函数是我们想给now加的装饰。now就相当于毛胚房，然后log这种函数可以给他装修
def log(func):
    def wrapper(*args,**kw):
        print('call %s():' %func.__name__)
        return func(*args,**kw)
    return wrapper
@log
def now():
    print('2020-10-18')
f = now
now = log(now)
print(f())
print(now())

# decorator本身需要传入参数
def log(text):
    def decorator(func):
        def wrapper(*args,**kw):
            print('%s %s():' %(text,func.__name__))
            return func(*args,**kw)
        return wrapper
    return decorator
# 首先执行log('execute'),返回的是decorator函数，再调用返回的函数
@log('execute')
def now():
    print('2020-10-18')
f=now()
now = log('execute')(now)
print(f)
print(now())

# 升级,不用写wrapper.__name__=func.__name__这样的代码
import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args,**kw):
        print('call %s():'%func.__name__)
        return func(*args,**kw)
    return wrapper
@log
def now():
    print('2020-10-18')
f = now
# 这样就不会打印wrapper
now = log(now)
print(f())
print(now())

# 针对带参数的decorator升级
import functools
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args,**kw):
            print('%s %s():' %(text,func.__name__))
            return func(*args,**kw)
        return wrapper
    return decorator
@log('execute')
def now():
    print('2020-10-18')
f = now
now = log('hello')(now)
print(f())
print(now())

# 练习1
# 请设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间
import time,functools
def metric(fn):
    @functools.wraps(fn)
    def wrapper(*args,**kw):
        # t1 = time.strftime(('%Y-%m-%d-%H-%M-%S',time.localtime(time.time())))
        begin = time.time()
        a = fn(*args,**kw)
        # t2 = time.strftime(('%Y-%m-%d-%H-%M-%S',time.localtime(time.time())))
        end = time.time()
        print('%s executed in %s ms' % (fn.__name__, (end-begin)*1000))
        return a
    return wrapper
# 测试
@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y;
@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z;
f = fast(11, 22)
s = slow(11, 22, 33)
if f != 33:
    print('测试失败!')
elif s != 7986:
    print('测试失败!')
