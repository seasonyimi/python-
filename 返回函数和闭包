# -*- coding: utf-8 -*-

# 返回函数
# 函数做为返回值
# 函数lazy_sum中定义了函数sum,内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中。闭包
# def lazy_sum(*args):
#     def sum():
#         ax = 0
#         for n in args:
#             ax = ax + n
#         return ax
#     return sum
# # f1和f2调用结果互不影响
# f1 = lazy_sum(1,3,5,7,9)
# f2 = lazy_sum(1,3,5,7,9)
# print(f1==f2)

# 闭包
# 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量
def count():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
    return fs
f1 ,f2 ,f3 = count()
print(f1())
print(f2())
print(f3())

# 练习题
# 利用闭包返回一个计数器函数，每次调用它返回递增整数
def createCounter():
    s = [0]
    def counter():
        s[0] = s[0]+1
        return s[0]
    return counter

# 测试:
counterA = createCounter()
print(counterA(), counterA(), counterA(), counterA(), counterA()) # 1 2 3 4 5
counterB = createCounter()
if [counterB(), counterB(), counterB(), counterB()] == [1, 2, 3, 4]:
    print('测试通过!')
else:
    print('测试失败!')
