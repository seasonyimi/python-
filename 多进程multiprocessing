'''普通函数调用一次返回一次，fork函数调用一次，返回两次。因为操作系统自动把当前程序复制了一份，然后分别在当前进程和复制的进程内返回
复制进程返回0，当前进程返回子进程的ID'''
import os
print('Process (%s) start...' % os.getpid())
pid = os.fork()
if pid == 0:
	print('I am child process (%s) my parent is %s.' % (os.getpid(),os.getppid()))
else:
	print('I (%s) just created a child process (%s).' % (os.getpid(),pid))

Process语法结构如下：
第一种创建进程的方式：
Process([group [, target [, name [, args [, kwargs]]]]])
target：表示这个进程实例所调用对象；
args：表示调用对象的位置参数元组；
kwargs：表示调用对象的关键字参数字典；
name：为当前进程实例的别名；
group：大多数情况下用不到；
Process类常用方法：
is_alive()：判断进程实例是否还在执行；
join([timeout])：是否等待进程实例执行结束，或等待多少秒；
start()：启动进程实例（创建子进程）；
run()：如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法；
terminate()：不管任务是否完成，立即终止；
Process类常用属性：
name：当前进程实例别名，默认为Process-N，N为从1开始递增的整数；
pid：当前进程实例的PID值；
第二种创建进程的方式为：继承Process,并且重写run方法
