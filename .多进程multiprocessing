'''普通函数调用一次返回一次，fork函数调用一次，返回两次。因为操作系统自动把当前程序复制了一份，然后分别在当前进程和复制的进程内返回
复制进程返回0，当前进程返回子进程的ID'''
import os
print('Process (%s) start...' % os.getpid())
pid = os.fork()
if pid == 0:
	print('I am child process (%s) my parent is %s.' % (os.getpid(),os.getppid()))
else:
	print('I (%s) just created a child process (%s).' % (os.getpid(),pid))

Process语法结构如下：
第一种创建进程的方式：
Process([group [, target [, name [, args [, kwargs]]]]])
target：表示这个进程实例所调用对象；
args：表示调用对象的位置参数元组；
kwargs：表示调用对象的关键字参数字典；
name：为当前进程实例的别名；
group：大多数情况下用不到；
Process类常用方法：
is_alive()：判断进程实例是否还在执行；
join([timeout])：是否等待进程实例执行结束，或等待多少秒；
start()：启动进程实例（创建子进程）；
run()：如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法；
terminate()：不管任务是否完成，立即终止；
Process类常用属性：
name：当前进程实例别名，默认为Process-N，N为从1开始递增的整数；
pid：当前进程实例的PID值；
第二种创建进程的方式为：继承Process,并且重写run方法



# 多进程
from multiprocessing import Process
import os

#子进程要执行的代码
def run_proc(name):
    print('Run child process %s (%s）...' %(name,os.getpid()))

if __name__ == '__main__':
    print('Parent process %s.' % os.getpid())
    '''
    Process([group [, target [, name [, args [, kwargs]]]]])
    target：表示这个进程实例所调用对象；
    args：表示调用对象的位置参数元组；
    kwargs：表示调用对象的关键字参数字典；
    name：为当前进程实例的别名；
    group：大多数情况下用不到；
    '''
    p = Process(target=run_proc,args=('case',))
    print('Child process will start.')
    p.start()
    p.join()      #join方法可以等待子进程结束后再继续下去运行，通常用于进程间的同步
    print('Child process end.')


#pool 线程池
# 启动大量的子进程，用进程池的方式批量创建子进程
from multiprocessing import Pool
import os,time,random

def long_time_task(name):
    print('Run task %s (%s)...' % (name,os.getpid()))
    start = time.time()
    time.sleep(random.random()*3)
    end = time.time()
    print('Task %s runs %0.2f seconds.' % (name,(end-start)))

if __name__ == '__main__':
    print('Parent process %s.' % os.getpid())
    p = Pool(4)
    for i in range(5):
        p.apply_async(long_time_task,args=(i,))
    print('Waiting for all subprocesses done...')
    p.close()      #close()之后不能添加新的process
    p.join()      #对Pool对象调用join方法会等待所有子进程执行完毕
    print('All subprocesses done.')
    '''
    task4要等待前面某个Task完成后才执行，因为电脑上Pool的默认大小为4
    因此最多同时执行4个进程
    '''
    
    
子进程不懂？？？？？？    
# subprocess模块--启动一个外部进程，控制其输入输出
import subprocess

print('$ nslookup www.python.org')
r = subprocess.call(['nslookup','www.python.org'])
print('Exit code:',r)

print('$ nslookup')
p = subprocess.Popen(['nslookup'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, err = p.communicate(b'set q=mx\npython.org\nexit\n')
print(output.decode('utf-8'))
print('Exit code:', p.returncode)



# 进程间通信
# multiprocessing模块包装了底层的机制，提供了Queue,Pipes等多种方式来交换数据
# 以Queue为例，在父进程里创建两个子进程，一个往里写，一个往里读
from multiprocessing import Process,Queue
import os,time,random

def wirte(q):
    print('Process to write: %s' %os.getpid())
    for value in ['A','B','C']:
        print('Put %s to queue...' % value)
        q.put(value)
        time.sleep(random.random())

def read(q):
    print('Process to read: %s' % os.getpid())
    while True:
        value = q.get(True)
        print('Get %s from queue.' %value)

if __name__ == '__main__':
    # 父进程创建Queue，并传给各个子系统
    q = Queue()
    pw = Process(target=wirte,args=(q,))
    pr = Process(target=read,args=(q,))
    # 启动写
    pw.start()
    # 启动读
    pr.start()
    # 等待pw结束
    pw.join()
    pr.terminate()   #因为pr里是死循环，无法等待其结束，只能强行终止
