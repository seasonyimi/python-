# -*- coding: utf-8 -*-
from types import MethodType
# 绑定一个属性
class Student(object):
    pass
s = Student()
s.name = 'Michael' #动态给实例绑定一个属性
print(s.name)
def set_age(self,age): #定义一个函数做为实例方法
    self.age = age
s.set_age = MethodType(set_age,s)    #给实例绑定一个方法
s.set_age(25) #调用实例方法
print(s.age)
# 另一个实例绑定方法，发现没用了
s2 = Student()
# s2.set_age(30)
# print(s2.age)

# 给所有实例绑定的方法
def set_score(self,score):
    self.score = score

Student.set_score = set_score
s.set_score(100)
s2.set_score(80)
print(s.score)
print(s2.score)
# 《！！！！！！》上面的set_score方法可以直接定义在class中，但动态绑定允许我们在程序运行的过程中动态给class加上功能
#__slots__仅对当前类的实例作用，对继承的子类没用
#如果想继承，则子类中也需要写__slots__，这样就是自己和父类的slots
# 限制实例属性
class Teacher(object):
    __slots__ = ('name','age')  #用tuple定义允许绑定的属性名称

b = Teacher()   #创建新实例
b.name = 'rose'
b.age = 5
# score会报错，因为没有收录到slots中
# b.score = 55





